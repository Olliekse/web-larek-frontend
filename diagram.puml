@startuml Web-Larek

skinparam class {
    BackgroundColor White
    ArrowColor #666666
    BorderColor #666666
}

package "Core" {
    abstract class BasePresenter {
        # events: IEvents
        + {abstract} init(): void
        # destroy(): void
    }

    abstract class EventEmitter {
        - events: Record<string, Function[]>
        + on(event: string, handler: Function): void
        + off(event: string, handler: Function): void
        + emit(event: string, data?: any): void
        + trigger(event: string): Function
    }

    abstract class Card {
        # template: HTMLTemplateElement
        # container: HTMLElement
        # domService: IDOMService
        + render(data: IProduct): HTMLElement
        # initializeElements(): void
        # getCategoryClass(category: string): string
    }
}

package "Models" {
    class AppState {
        - cart: CartState
        - modal: ModalState
        - products: Product[]
        - loading: LoadingState
        - error: string | null
        + getProducts(): Product[]
        + setProducts(products: Product[]): void
        + addToCart(product: Product): void
        + removeFromCart(id: string): void
        + getCart(): CartState
        + clearCart(): void
        - calculateCartTotal(): number
    }

    class FormModel {
        # payment: string
        # email: string
        # phone: string
        # address: string
        # formErrors: FormErrors
        + setOrderData(field: string, value: string): void
        + validateContacts(): boolean
        + validateOrder(): boolean
        + getOrderLot(): IOrder
        + resetForm(): void
    }
}

package "Views" {
    class CardView {
        - currentProduct: IProduct
        + constructor(template: HTMLTemplateElement, events: IEvents, container: HTMLElement)
        + render(data: IProduct): HTMLElement
        + updateButtonState(isInCart: boolean): void
        + renderModal(data: IProduct): HTMLElement
    }

    class ModalView {
        - container: HTMLElement
        - content: HTMLElement
        - closeButton: HTMLElement
        - pageWrapper: HTMLElement
        + constructor(container: HTMLElement, pageWrapper: HTMLElement)
        + open(): void
        + close(): void
        + setContent(content: HTMLElement): void
        + setTitle(title: string): void
    }

    class ContactsView {
        - form: HTMLFormElement
        - inputs: HTMLInputElement[]
        - button: HTMLButtonElement
        - errorDisplay: HTMLElement
        + constructor(container: HTMLElement)
        + render(): HTMLElement
        + resetForm(): void
        + set valid(value: boolean)
        + set error(value: string)
    }
}

package "Presenters" {
    class ProductPresenter {
        - appState: AppState
        - view: CardView
        - api: ProductApi
        - gallery: HTMLElement
        + constructor(appState: AppState, view: CardView, api: ProductApi, gallery: HTMLElement)
        + init(): void
        - handleProductSelect(product: IProduct): void
        - updateProductStates(): void
    }

    class CartPresenter {
        - appState: AppState
        - view: ICart
        - modal: ModalView
        + init(): void
        - handleCartOpen(): void
        - handleItemRemove(id: string): void
    }

    class ContactsPresenter {
        - formModel: FormModel
        - view: ContactsView
        - successTemplate: HTMLTemplateElement
        + constructor(formModel: FormModel, view: ContactsView, successTemplate: HTMLTemplateElement)
        + init(): void
        - handleSubmit(data: ContactInfo): void
        - validateForm(): boolean
    }

    class AppPresenter {
        - appState: AppState
        - api: ProductApi
        - gallery: HTMLElement
        - modalContainer: HTMLElement
        - pageWrapper: HTMLElement
        + constructor(container: HTMLElement)
        + init(): void
        - initPresenters(): void
        - setupEventHandlers(): void
    }
}

' Inheritance relationships
BasePresenter <|-- ProductPresenter
BasePresenter <|-- CartPresenter
BasePresenter <|-- ContactsPresenter
BasePresenter <|-- AppPresenter
EventEmitter <|-- BasePresenter
Card <|-- CardView

' Composition and dependencies
AppPresenter *-- ProductPresenter
AppPresenter *-- CartPresenter
AppPresenter *-- ContactsPresenter
AppPresenter *-- AppState

ProductPresenter --> CardView
ProductPresenter --> AppState

CartPresenter --> ModalView
CartPresenter --> AppState

ContactsPresenter --> ContactsView
ContactsPresenter --> FormModel

' DOM element flow
AppPresenter ..> ProductPresenter : injects gallery
AppPresenter ..> ModalView : injects container & wrapper
AppPresenter ..> ContactsPresenter : injects success template

@enduml 