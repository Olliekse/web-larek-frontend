{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/components/LarekAPI.ts","webpack://my-webpack-project/./src/components/base/api.ts","webpack://my-webpack-project/./src/components/base/events.ts","webpack://my-webpack-project/./src/components/base/Model.ts","webpack://my-webpack-project/./src/components/AppData.ts","webpack://my-webpack-project/./src/components/base/Component.ts","webpack://my-webpack-project/./src/components/Page.ts","webpack://my-webpack-project/./src/utils/utils.ts","webpack://my-webpack-project/./src/components/Card.ts","webpack://my-webpack-project/./src/components/common/Modal.ts","webpack://my-webpack-project/./src/components/common/Basket.ts","webpack://my-webpack-project/./src/components/common/Form.ts","webpack://my-webpack-project/./src/components/common/Success.ts","webpack://my-webpack-project/./src/utils/constants.ts","webpack://my-webpack-project/./src/index.ts"],"sourcesContent":["import { Api } from './base/api';\n/**\n * API client for handling communication with the backend\n * Extends the base Api class with specific methods for the Web Larek store\n */\nexport class LarekAPI extends Api {\n    constructor(cdn, baseUrl, options) {\n        super(baseUrl, options);\n        this.cdn = cdn;\n    }\n    /**\n     * Fetches the list of products from the API\n     * Adds CDN URL to product images\n     * @returns Promise with array of products\n     */\n    getProductList() {\n        return this.get('/product').then((data) => data.items.map((item) => (Object.assign(Object.assign({}, item), { image: this.cdn + item.image }))));\n    }\n    /**\n     * Creates a new order in the system\n     * @param order Order data to be submitted\n     * @returns Promise with order result\n     */\n    createOrder(order) {\n        return this.post('/order', order).then((data) => data);\n    }\n}\n","/**\n * Base API client class\n * Provides common functionality for making HTTP requests\n */\nexport class Api {\n    /**\n     * Creates a new API client instance\n     * @param {string} baseUrl - Base URL for all API requests\n     * @param {RequestInit} [options={}] - Default fetch options\n     */\n    constructor(baseUrl, options = {}) {\n        var _a;\n        this.baseUrl = baseUrl;\n        this.options = {\n            headers: Object.assign({ 'Content-Type': 'application/json' }, ((_a = options.headers) !== null && _a !== void 0 ? _a : {})),\n        };\n    }\n    /**\n     * Handles API response\n     * Automatically parses JSON and handles errors\n     * @protected\n     * @param {Response} response - Fetch Response object\n     * @returns {Promise<object>} Parsed response data\n     * @throws {string} Error message if request fails\n     */\n    handleResponse(response) {\n        if (response.ok)\n            return response.json();\n        else\n            return response\n                .json()\n                .then((data) => { var _a; return Promise.reject((_a = data.error) !== null && _a !== void 0 ? _a : response.statusText); });\n    }\n    /**\n     * Makes a GET request to the API\n     * @param {string} uri - URI to append to base URL\n     * @returns {Promise<object>} Parsed response data\n     */\n    get(uri) {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method: 'GET' })).then(this.handleResponse);\n    }\n    /**\n     * Makes a POST, PUT, or DELETE request to the API\n     * @param {string} uri - URI to append to base URL\n     * @param {object} data - Data to send in request body\n     * @param {ApiPostMethods} [method='POST'] - HTTP method to use\n     * @returns {Promise<object>} Parsed response data\n     */\n    post(uri, data, method = 'POST') {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method, body: JSON.stringify(data) })).then(this.handleResponse);\n    }\n}\n","/**\n * Брокер событий, классическая реализация\n * В расширенных вариантах есть возможность подписаться на все события\n * или слушать события по шаблону например\n */\nexport class EventEmitter {\n    constructor() {\n        this._events = new Map();\n    }\n    /**\n     * Установить обработчик на событие\n     */\n    on(eventName, callback) {\n        var _a;\n        if (!this._events.has(eventName)) {\n            this._events.set(eventName, new Set());\n        }\n        (_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.add(callback);\n    }\n    /**\n     * Снять обработчик с события\n     */\n    off(eventName, callback) {\n        var _a;\n        if (this._events.has(eventName)) {\n            this._events.get(eventName).delete(callback);\n            if (((_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.size) === 0) {\n                this._events.delete(eventName);\n            }\n        }\n    }\n    /**\n     * Инициировать событие с данными\n     */\n    emit(eventName, data) {\n        this._events.forEach((subscribers, name) => {\n            if (name === '*')\n                subscribers.forEach((callback) => callback({\n                    eventName,\n                    data,\n                }));\n            if ((name instanceof RegExp && name.test(eventName)) ||\n                name === eventName) {\n                subscribers.forEach((callback) => callback(data));\n            }\n        });\n    }\n    /**\n     * Слушать все события\n     */\n    onAll(callback) {\n        this.on('*', callback);\n    }\n    /**\n     * Сбросить все обработчики\n     */\n    offAll() {\n        this._events = new Map();\n    }\n    /**\n     * Сделать коллбек триггер, генерирующий событие при вызове\n     */\n    trigger(eventName, context) {\n        return (event = {}) => {\n            this.emit(eventName, Object.assign(Object.assign({}, (event || {})), (context || {})));\n        };\n    }\n}\n","/**\n * Type guard to check if an object is an instance of Model\n * @param {unknown} obj - Object to check\n * @returns {boolean} True if object is a Model instance\n */\nexport const isModel = (obj) => {\n    return obj instanceof Model;\n};\n/**\n * Abstract base class for data models in the application\n * Provides state management and event emission functionality\n * @template T The type of state data managed by the model\n */\nexport class Model {\n    /**\n     * Creates a new model instance\n     * @param {Partial<T>} data - Initial state data\n     * @param {IEvents} events - Event emitter for state changes\n     */\n    constructor(data, events) {\n        this.state = data;\n        this.events = events;\n    }\n    /**\n     * Gets the current state of the model\n     * @returns {T} The current state\n     */\n    getState() {\n        return this.state;\n    }\n    /**\n     * Updates the model's state\n     * @protected\n     * @param {T} newState - New state to set\n     */\n    updateState(newState) {\n        this.state = newState;\n    }\n    /**\n     * Emits a state change event\n     * @protected\n     * @param {string} event - Name of the event to emit\n     */\n    emitChanges(event) {\n        this.events.emit(event);\n    }\n}\n","import { Model } from './base/Model';\n/**\n * Action types for state mutations\n */\nexport var ActionType;\n(function (ActionType) {\n    ActionType[\"SET_CATALOG\"] = \"SET_CATALOG\";\n    ActionType[\"ADD_TO_BASKET\"] = \"ADD_TO_BASKET\";\n    ActionType[\"REMOVE_FROM_BASKET\"] = \"REMOVE_FROM_BASKET\";\n    ActionType[\"CLEAR_BASKET\"] = \"CLEAR_BASKET\";\n    ActionType[\"SET_PREVIEW\"] = \"SET_PREVIEW\";\n    ActionType[\"UPDATE_ORDER\"] = \"UPDATE_ORDER\";\n})(ActionType || (ActionType = {}));\n/**\n * Main application data management class that handles the state of the web store.\n * Implements a simple state management pattern with actions and mutations.\n */\nexport class AppData extends Model {\n    /**\n     * Creates an instance of AppData.\n     * @param {Partial<IAppState>} data - Initial state data for the application\n     * @param {IEvents} events - Event emitter instance for handling state changes\n     */\n    constructor(data, events) {\n        super(data, events);\n    }\n    /**\n     * Dispatches an action to modify the state\n     * @private\n     * @param {ActionType} type - Type of action to perform\n     * @param {IProduct[] | IProduct | string | OrderUpdatePayload | null} payload - Data for the action\n     */\n    dispatch(type, payload) {\n        let newState = {};\n        let order;\n        let field;\n        let value;\n        switch (type) {\n            case ActionType.SET_CATALOG:\n                newState = { catalog: payload };\n                break;\n            case ActionType.ADD_TO_BASKET:\n                newState = {\n                    basket: [...this.getState().basket, payload],\n                };\n                break;\n            case ActionType.REMOVE_FROM_BASKET:\n                newState = {\n                    basket: this.getState().basket.filter((item) => item.id !== payload),\n                };\n                break;\n            case ActionType.CLEAR_BASKET:\n                newState = { basket: [] };\n                break;\n            case ActionType.SET_PREVIEW:\n                newState = { preview: payload };\n                break;\n            case ActionType.UPDATE_ORDER:\n                ({ field, value } = payload);\n                order = Object.assign({}, this.getState().order);\n                if (field === 'total') {\n                    order.total = Number(value);\n                }\n                else if (field !== 'items') {\n                    order[field] = value;\n                }\n                newState = { order };\n                break;\n        }\n        this.updateState(Object.assign(Object.assign({}, this.getState()), newState));\n        const eventMap = {\n            [ActionType.SET_CATALOG]: 'items:changed',\n            [ActionType.ADD_TO_BASKET]: 'basket:changed',\n            [ActionType.REMOVE_FROM_BASKET]: 'basket:changed',\n            [ActionType.CLEAR_BASKET]: 'basket:changed',\n            [ActionType.SET_PREVIEW]: 'preview:changed',\n            [ActionType.UPDATE_ORDER]: 'order:changed',\n        };\n        this.emitChanges(eventMap[type]);\n    }\n    /**\n     * Sets the product catalog with new items.\n     * @param {IProduct[]} items - Array of products to set as the catalog\n     * @emits {items:changed} When catalog is updated\n     */\n    setCatalog(items) {\n        this.dispatch(ActionType.SET_CATALOG, items);\n    }\n    /**\n     * Adds a product to the shopping basket.\n     * @param {IProduct} item - Product to add to the basket\n     * @emits {basket:changed} When item is added to basket\n     */\n    addToBasket(item) {\n        this.dispatch(ActionType.ADD_TO_BASKET, item);\n    }\n    /**\n     * Removes a product from the shopping basket by its ID.\n     * @param {string} id - ID of the product to remove\n     * @emits {basket:changed} When item is removed from basket\n     */\n    removeFromBasket(id) {\n        this.dispatch(ActionType.REMOVE_FROM_BASKET, id);\n    }\n    /**\n     * Clears all items from the shopping basket.\n     * @emits {basket:changed} When basket is cleared\n     */\n    clearBasket() {\n        this.dispatch(ActionType.CLEAR_BASKET, null);\n    }\n    /**\n     * Sets the product to be previewed in detail view.\n     * @param {IProduct | null} item - Product to preview, or null to clear preview\n     * @emits {preview:changed} When preview item is set or cleared\n     */\n    setPreview(item) {\n        this.dispatch(ActionType.SET_PREVIEW, item);\n    }\n    /**\n     * Updates a specific field in the order data.\n     * @param {keyof IAppState['order']} field - Name of the order field to update\n     * @param {string | number} value - New value for the field\n     * @emits {order:changed} When order field is updated\n     */\n    setOrderField(field, value) {\n        this.dispatch(ActionType.UPDATE_ORDER, { field, value });\n    }\n    /**\n     * Validates the current order data.\n     * @returns {Partial<Record<keyof IAppState['order'], string>>} Object containing validation errors, if any\n     */\n    validateOrder() {\n        const order = this.getState().order;\n        const requiredFields = [\n            'email',\n            'phone',\n            'address',\n        ];\n        return requiredFields.reduce((errors, field) => {\n            if (!order[field]) {\n                errors[field] = `${field} is required`;\n            }\n            return errors;\n        }, {});\n    }\n}\n","/**\n * Abstract base class for all UI components\n * Provides common functionality for rendering and event handling\n * @template T The type of data the component will render\n */\nexport class Component {\n    /**\n     * Creates a new component instance\n     * @param {HTMLElement} container - The root element for this component\n     * @param {IEvents} [events] - Optional event emitter for component communication\n     */\n    constructor(container, events) {\n        this.container = container;\n        this.events = events;\n    }\n    /**\n     * Sets the text content of an HTML element\n     * @protected\n     * @param {HTMLElement} element - The element to update\n     * @param {unknown} value - The value to set as text content\n     */\n    setText(element, value) {\n        if (element) {\n            element.textContent = String(value);\n        }\n    }\n    /**\n     * Sets the source and alt text of an image element\n     * @protected\n     * @param {HTMLImageElement} element - The image element to update\n     * @param {string} src - The source URL for the image\n     * @param {string} [alt] - Optional alternative text for the image\n     */\n    setImage(element, src, alt) {\n        if (element) {\n            element.src = src;\n            if (alt) {\n                element.alt = alt;\n            }\n        }\n    }\n    /**\n     * Sets or removes the disabled attribute of an HTML element\n     * @protected\n     * @param {HTMLElement} element - The element to update\n     * @param {boolean} state - Whether to disable (true) or enable (false) the element\n     */\n    setDisabled(element, state) {\n        if (element) {\n            if (state) {\n                element.setAttribute('disabled', 'disabled');\n            }\n            else {\n                element.removeAttribute('disabled');\n            }\n        }\n    }\n    /**\n     * Emits an event through the component's event emitter\n     * @protected\n     * @param {string} event - The name of the event to emit\n     * @param {object} [payload] - Optional data to send with the event\n     */\n    emit(event, payload) {\n        if (this.events) {\n            this.events.emit(event, payload);\n        }\n    }\n}\n","import { Component } from './base/Component';\n/**\n * Page component managing the main application layout\n * Handles catalog display and cart counter updates\n * Listens for counter and catalog change events\n */\nexport class Page extends Component {\n    /**\n     * Initializes the page component and sets up event listeners\n     * @param container The main page container element\n     * @param events Event emitter for page interactions\n     */\n    constructor(container, events) {\n        super(container);\n        // Initialize page elements\n        this._counter = container.querySelector('.header__basket-counter');\n        this._catalog = container.querySelector('.gallery');\n        this._wrapper = container.querySelector('.page__wrapper');\n        // Set up event listeners for counter and catalog updates\n        if (events) {\n            events.on('counter:changed', this.setCounter.bind(this));\n            events.on('catalog:changed', this.setCatalog.bind(this));\n        }\n    }\n    /**\n     * Updates the shopping cart counter display\n     * @param value Number of items in cart\n     */\n    set counter(value) {\n        this.setText(this._counter, value.toString());\n    }\n    /**\n     * Updates the product catalog display\n     * Replaces all current cards with new ones\n     * @param items Array of product card elements\n     */\n    set catalog(items) {\n        this._catalog.replaceChildren(...items);\n    }\n    /**\n     * Event handler for counter updates\n     * @param value New counter value\n     */\n    setCounter(value) {\n        this.counter = value;\n    }\n    /**\n     * Event handler for catalog updates\n     * @param items New catalog items\n     */\n    setCatalog(items) {\n        this.catalog = items;\n    }\n    /**\n     * Renders the page with provided data\n     * Updates counter and catalog if provided\n     * @param data Partial page data to update\n     * @returns The page container element\n     */\n    render(data) {\n        if (data.counter !== undefined) {\n            this.counter = data.counter;\n        }\n        if (data.catalog) {\n            this.catalog = data.catalog;\n        }\n        return this.container;\n    }\n}\n","export function pascalToKebab(value) {\n    return value.replace(/([a-z0–9])([A-Z])/g, '$1-$2').toLowerCase();\n}\nexport function isSelector(x) {\n    return typeof x === 'string' && x.length > 1;\n}\nexport function isEmpty(value) {\n    return value === null || value === undefined;\n}\nexport function ensureAllElements(selectorElement, context = document) {\n    if (isSelector(selectorElement)) {\n        return Array.from(context.querySelectorAll(selectorElement));\n    }\n    if (selectorElement instanceof NodeList) {\n        return Array.from(selectorElement);\n    }\n    if (Array.isArray(selectorElement)) {\n        return selectorElement;\n    }\n    throw new Error(`Unknown selector element`);\n}\nexport function ensureElement(selectorElement, context) {\n    if (isSelector(selectorElement)) {\n        const elements = ensureAllElements(selectorElement, context);\n        if (elements.length > 1) {\n            console.warn(`selector ${selectorElement} return more then one element`);\n        }\n        if (elements.length === 0) {\n            throw new Error(`selector ${selectorElement} return nothing`);\n        }\n        return elements.pop();\n    }\n    if (selectorElement instanceof HTMLElement) {\n        return selectorElement;\n    }\n    throw new Error('Unknown selector element');\n}\nexport function cloneTemplate(query) {\n    const template = ensureElement(query);\n    return template.content.firstElementChild.cloneNode(true);\n}\nexport function bem(block, element, modifier) {\n    let name = block;\n    if (element)\n        name += `__${element}`;\n    if (modifier)\n        name += `_${modifier}`;\n    return {\n        name,\n        class: `.${name}`,\n    };\n}\nexport function getObjectProperties(obj, filter) {\n    return Object.entries(Object.getOwnPropertyDescriptors(Object.getPrototypeOf(obj)))\n        .filter(([name, prop]) => filter ? filter(name, prop) : name !== 'constructor')\n        .map(([name, prop]) => name);\n}\n/**\n * Устанавливает dataset атрибуты элемента\n */\nexport function setElementData(el, data) {\n    for (const key in data) {\n        el.dataset[key] = String(data[key]);\n    }\n}\n/**\n * Получает типизированные данные из dataset атрибутов элемента\n */\nexport function getElementData(el, scheme) {\n    const data = {};\n    for (const key in el.dataset) {\n        data[key] = scheme[key](el.dataset[key]);\n    }\n    return data;\n}\n/**\n * Проверка на простой объект\n */\nexport function isPlainObject(obj) {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype === Object.getPrototypeOf({}) || prototype === null;\n}\nexport function isBoolean(v) {\n    return typeof v === 'boolean';\n}\n/**\n * Фабрика DOM-элементов в простейшей реализации\n * здесь не учтено много факторов\n * в интернет можно найти более полные реализации\n */\nexport function createElement(tagName, props, children) {\n    const element = document.createElement(tagName);\n    if (props) {\n        for (const key in props) {\n            const value = props[key];\n            if (isPlainObject(value) && key === 'dataset') {\n                setElementData(element, value);\n            }\n            else {\n                // @ts-expect-error fix indexing later\n                element[key] = isBoolean(value) ? value : String(value);\n            }\n        }\n    }\n    if (children) {\n        for (const child of Array.isArray(children) ? children : [children]) {\n            element.append(child);\n        }\n    }\n    return element;\n}\n","import { Component } from './base/Component';\nimport { ensureElement } from '../utils/utils';\n/**\n * Component class representing a product card in the store\n * Handles rendering and interaction for individual product displays\n * @extends Component<ICard>\n */\nexport class Card extends Component {\n    /**\n     * Creates an instance of Card\n     * @param {HTMLElement | DocumentFragment} container - The container element for the card\n     * @param {ICardActions} [actions] - Optional actions for card interaction\n     */\n    constructor(container, actions) {\n        const element = container instanceof DocumentFragment\n            ? container.firstElementChild\n            : container;\n        super(element);\n        // Get all elements\n        this._title = ensureElement('.card__title', element);\n        this._price = ensureElement('.card__price', element);\n        this._category = element.querySelector('.card__category');\n        this._image = element.querySelector('.card__image');\n        this._button = element.querySelector('.button');\n        // Handle basket items differently\n        const isBasketItem = element.classList.contains('basket__item');\n        if (!isBasketItem && !this._category) {\n            throw new Error('Card elements not found');\n        }\n        // Set up event listeners\n        if (actions === null || actions === void 0 ? void 0 : actions.onClick) {\n            if (this._button) {\n                this._button.addEventListener('click', actions.onClick);\n            }\n            else {\n                // If no button, make the whole card clickable\n                element.addEventListener('click', actions.onClick);\n            }\n        }\n        if (actions === null || actions === void 0 ? void 0 : actions.onDelete) {\n            const deleteButton = element.querySelector('.basket__item-delete');\n            if (deleteButton) {\n                deleteButton.addEventListener('click', actions.onDelete);\n            }\n        }\n    }\n    /**\n     * Sets the card's ID in the dataset\n     * @param {string} value - The ID to set\n     */\n    set id(value) {\n        this.container.dataset.id = value;\n    }\n    /**\n     * Gets the card's ID from the dataset\n     * @returns {string} The card's ID or empty string if not set\n     */\n    get id() {\n        return this.container.dataset.id || '';\n    }\n    /**\n     * Sets the card's title text\n     * @param {string} value - The title to set\n     */\n    set title(value) {\n        this.setText(this._title, value);\n    }\n    /**\n     * Sets the card's image source\n     * @param {string} value - The image URL\n     */\n    set image(value) {\n        if (this._image) {\n            this._image.src = value;\n            this._image.alt = this.title;\n        }\n    }\n    /**\n     * Sets the selected state of the card\n     * @param {boolean} value - Whether the card is selected\n     */\n    set selected(value) {\n        if (this._button) {\n            this.setDisabled(this._button, value);\n            this._button.classList.toggle('button_disabled', value);\n        }\n    }\n    /**\n     * Sets the disabled state of the card\n     * @param {boolean} value - Whether the card is disabled\n     */\n    set disabled(value) {\n        if (this._button) {\n            this.setDisabled(this._button, value);\n            this._button.classList.toggle('button_disabled', value);\n        }\n    }\n    /**\n     * Sets the price display of the card\n     * @protected\n     * @param {number | null} value - The price in synapses or null if priceless\n     */\n    setPrice(value) {\n        this.setText(this._price, value ? `${value} синапсов` : 'Бесценно');\n        if (this._button && value === null) {\n            this.setDisabled(this._button, true);\n        }\n    }\n    /**\n     * Sets the category of the card and applies appropriate styling\n     * @protected\n     * @param {string} value - The category name\n     */\n    setCategory(value) {\n        if (this._category && !this.container.classList.contains('basket__item')) {\n            this.setText(this._category, value);\n            this._category.className = 'card__category';\n            // Map category names to their CSS classes\n            const categoryClasses = {\n                'софт-скил': 'card__category_soft',\n                'хард-скил': 'card__category_hard',\n                другое: 'card__category_other',\n                дополнительное: 'card__category_additional',\n                кнопка: 'card__category_button',\n            };\n            const categoryClass = categoryClasses[value.toLowerCase()] || 'card__category_other';\n            this._category.classList.add(categoryClass);\n        }\n    }\n    /**\n     * Renders the card with the provided data\n     * @param {ICard} data - The data to render\n     * @returns {HTMLElement} The rendered card element\n     */\n    render(data) {\n        if (data.id)\n            this.id = data.id;\n        if (data.title)\n            this.title = data.title;\n        if (data.image)\n            this.image = data.image;\n        if (data.category)\n            this.setCategory(data.category);\n        this.setPrice(data.price);\n        if (this._button && !this.container.classList.contains('basket__item')) {\n            this.setText(this._button, data.price === null ? 'Не продаётся' : 'В корзину');\n            this.selected = data.price === null;\n        }\n        return this.container;\n    }\n}\n/**\n * Extended card class that includes a description\n * Used for detailed preview displays\n * @extends Card\n */\nexport class PreviewCard extends Card {\n    /**\n     * Creates an instance of PreviewCard\n     * @param {HTMLElement} container - The container element\n     * @param {ICardActions} [actions] - Optional actions for card interaction\n     */\n    constructor(container, actions) {\n        super(container, actions);\n        this._description = ensureElement('.card__text', container);\n    }\n    /**\n     * Renders the preview card with description\n     * @param {ICard} data - The data to render\n     * @returns {HTMLElement} The rendered preview card element\n     */\n    render(data) {\n        super.render(data);\n        if (data.description) {\n            this.setText(this._description, data.description);\n        }\n        return this.container;\n    }\n}\n","import { Component } from '../base/Component';\n/**\n * Modal component for displaying content in a popup window\n * Handles opening, closing, and content management\n * Supports clicking outside to close\n */\nexport class Modal extends Component {\n    /**\n     * Initializes the modal component and sets up event listeners\n     * @param container The modal's container element\n     * @param events Event emitter for modal interactions\n     */\n    constructor(container, events) {\n        super(container);\n        // Initialize modal elements\n        this._closeButton = container.querySelector('.modal__close');\n        this._content = container.querySelector('.modal__content');\n        this._container = container.querySelector('.modal__container');\n        // Set up close button click handler\n        if (this._closeButton) {\n            this._closeButton.addEventListener('click', () => {\n                this.close();\n            });\n        }\n        // Set up click outside content handler\n        this.container.addEventListener('click', (event) => {\n            if (event.target instanceof Element &&\n                event.target.classList.contains('modal')) {\n                this.close();\n            }\n        });\n    }\n    /**\n     * Updates the modal's content\n     * Replaces existing content with new HTML element\n     */\n    set content(value) {\n        this._content.replaceChildren(value);\n    }\n    /**\n     * Opens the modal window\n     * Prevents scrolling of the main page while modal is open\n     */\n    open() {\n        document.documentElement.style.overflow = 'hidden';\n        document.body.style.overflow = 'hidden';\n        this.container.classList.add('modal_active');\n    }\n    /**\n     * Closes the modal window\n     * Restores page scrolling and hides the modal\n     */\n    close() {\n        document.documentElement.style.overflow = '';\n        document.body.style.overflow = '';\n        this.container.classList.remove('modal_active');\n    }\n    /**\n     * Renders the modal with new content\n     * @param data Object containing the HTML element to display\n     * @returns The modal container element\n     */\n    render(data) {\n        this.content = data.content;\n        return this.container;\n    }\n}\n","import { Component } from '../base/Component';\nimport { ensureElement } from '../../utils/utils';\n/**\n * Component managing the shopping cart functionality\n * Handles display of cart items, total calculation, and checkout process\n * Emits events for cart interactions\n */\nexport class Basket extends Component {\n    /**\n     * Initializes the basket component\n     * Sets up DOM elements and event listeners\n     * @param container Main basket container element\n     * @param events Event emitter for component communication\n     */\n    constructor(container, events) {\n        super(container, events);\n        this._list = ensureElement('.basket__list', this.container);\n        this._total = ensureElement('.basket__price', this.container);\n        this._button = ensureElement('.basket__button', this.container);\n        if (this._button) {\n            this._button.addEventListener('click', () => {\n                events.emit('basket:checkout');\n            });\n        }\n    }\n    /**\n     * Updates the list of items in the cart\n     * Disables checkout button if cart is empty\n     * @param items Array of rendered product elements\n     */\n    set items(items) {\n        this._list.replaceChildren(...items);\n        this.setDisabled(this._button, items.length === 0);\n    }\n    /**\n     * Updates the total price display\n     * Formats the price with currency unit (synapses)\n     * @param total New total price value\n     */\n    set total(total) {\n        this.setText(this._total, `${total.toString()} синапсов`);\n    }\n    /**\n     * Renders the basket with provided data\n     * Updates both items list and total price\n     * @param data Basket view data containing items and total\n     * @returns The basket container element\n     */\n    render(data) {\n        this.items = data.items;\n        this.total = data.total;\n        return this.container;\n    }\n}\n","import { Component } from '../base/Component';\n/**\n * Form component handling both order and contact forms\n * Manages form validation, error display, and submission\n * Emits events for form interactions and submissions\n */\nexport class Form extends Component {\n    /**\n     * Initializes the form component and sets up event listeners\n     * @param container The form container element\n     * @param events Event emitter for form interactions\n     */\n    constructor(container, events) {\n        super(container, events);\n        this._validationErrors = new Set(); // Current validation errors\n        // Initialize form elements\n        this._form = container.querySelector('form');\n        this._submit =\n            container.querySelector('.button[type=\"submit\"]') ||\n                container.querySelector('.button');\n        this._errors = container.querySelector('.form__errors');\n        this._paymentButtons = container.querySelectorAll('.order__buttons .button');\n        this._address = container.querySelector('input[name=\"address\"]');\n        this._email = container.querySelector('input[name=\"email\"]');\n        this._phone = container.querySelector('input[name=\"phone\"]');\n        // Initial form validation\n        this.validateForm();\n        // Set up payment method selection handlers\n        this._paymentButtons.forEach((button) => {\n            button.addEventListener('click', (e) => {\n                e.preventDefault(); // Prevent form submission\n                // Update payment button states\n                this._paymentButtons.forEach((btn) => {\n                    btn.classList.remove('button_alt-active');\n                });\n                button.classList.add('button_alt-active');\n                this.validateForm();\n            });\n        });\n        // Set up input field validation handlers\n        if (this._address) {\n            this._address.addEventListener('input', () => this.validateForm());\n        }\n        if (this._email) {\n            this._email.addEventListener('input', () => this.validateForm());\n        }\n        if (this._phone) {\n            this._phone.addEventListener('input', () => this.validateForm());\n        }\n        // Set up form submission handler\n        if (this._form) {\n            this._form.addEventListener('submit', this.handleSubmit.bind(this));\n        }\n    }\n    /**\n     * Validates all form fields and updates validation state\n     * Checks payment method selection, address, email, and phone\n     * Updates error messages and form validity\n     */\n    validateForm() {\n        this._validationErrors.clear();\n        // Validate payment method selection\n        if (this._paymentButtons.length > 0) {\n            const hasSelectedPayment = Array.from(this._paymentButtons).some((btn) => btn.classList.contains('button_alt-active'));\n            if (!hasSelectedPayment) {\n                this._validationErrors.add('Выберите способ оплаты');\n            }\n        }\n        // Validate delivery address\n        if (this._address && !this._address.value.trim()) {\n            this._validationErrors.add('Укажите адрес доставки');\n        }\n        // Validate email\n        if (this._email && !this._email.value.trim()) {\n            this._validationErrors.add('Укажите email');\n        }\n        // Validate phone number\n        if (this._phone && !this._phone.value.trim()) {\n            this._validationErrors.add('Укажите телефон');\n        }\n        // Update form state with validation results\n        this.errors = Array.from(this._validationErrors);\n        this.valid = this._validationErrors.size === 0;\n    }\n    /**\n     * Handles input field changes\n     * Emits input events with field name and value\n     */\n    handleInput(event) {\n        const target = event.target;\n        const field = target.name;\n        const value = target.value;\n        this.emit('input', { field, value });\n    }\n    /**\n     * Handles form submission\n     * Prevents default form submission and emits appropriate events\n     * Different handling for order form vs contacts form\n     */\n    handleSubmit(event) {\n        var _a, _b, _c;\n        event.preventDefault();\n        if (this._validationErrors.size === 0) {\n            if (this._paymentButtons.length > 0) {\n                // Handle order form submission\n                const selectedPayment = Array.from(this._paymentButtons).find((btn) => btn.classList.contains('button_alt-active'));\n                const paymentMethod = (selectedPayment === null || selectedPayment === void 0 ? void 0 : selectedPayment.getAttribute('name')) || '';\n                this.emit('submit', {\n                    payment: paymentMethod,\n                    address: ((_a = this._address) === null || _a === void 0 ? void 0 : _a.value) || '',\n                });\n            }\n            else {\n                // Handle contacts form submission\n                this.emit('contacts:submit', {\n                    email: ((_b = this._email) === null || _b === void 0 ? void 0 : _b.value) || '',\n                    phone: ((_c = this._phone) === null || _c === void 0 ? void 0 : _c.value) || '',\n                });\n            }\n        }\n    }\n    /**\n     * Updates submit button state based on form validity\n     */\n    set valid(value) {\n        if (this._submit) {\n            this.setDisabled(this._submit, !value);\n        }\n    }\n    /**\n     * Updates error message display\n     * Creates div elements for each error message\n     */\n    set errors(value) {\n        if (this._errors) {\n            this._errors.replaceChildren(...value.map((error) => {\n                const div = document.createElement('div');\n                div.textContent = error;\n                return div;\n            }));\n        }\n    }\n    /**\n     * Renders the form with current state\n     * Updates validity and error messages\n     * @returns The form container element\n     */\n    render(state) {\n        this.valid = state.valid;\n        this.errors = state.errors;\n        return this.container;\n    }\n}\n","import { Component } from '../base/Component';\nimport { ensureElement } from '../../utils/utils';\n/**\n * Success component for displaying order completion message\n * Shows the total amount spent and provides a close button\n * Emits close event when user dismisses the message\n */\nexport class Success extends Component {\n    /**\n     * Initializes the success message component\n     * Sets up elements and close button event listener\n     * @param container The success message container\n     * @param events Event emitter for component interactions\n     */\n    constructor(container, events) {\n        super(container, events);\n        // Initialize required elements using utility function\n        this._close = ensureElement('.order-success__close', this.container);\n        this._total = ensureElement('.order-success__description', this.container);\n        // Set up close button click handler\n        if (this._close) {\n            this._close.addEventListener('click', () => {\n                this.events.emit('success:close'); // Emit event when success message is closed\n            });\n        }\n    }\n    /**\n     * Updates the displayed total amount\n     * Formats the amount with currency unit (synapses)\n     * @param total The total amount to display\n     */\n    set total(total) {\n        this.setText(this._total, `Списано ${total} синапсов`);\n    }\n    /**\n     * Renders the success message with the total amount\n     * @param data Object containing the total amount spent\n     * @returns The success message container element\n     */\n    render(data) {\n        this.total = data.total;\n        return this.container;\n    }\n}\n","export const API_URL = `${process.env.API_ORIGIN}/api/weblarek`;\nexport const CDN_URL = `${process.env.API_ORIGIN}/content/weblarek`;\nexport const settings = {};\n","import './scss/styles.scss';\nimport { LarekAPI } from './components/LarekAPI';\nimport { EventEmitter } from './components/base/events';\nimport { AppData } from './components/AppData';\nimport { Page } from './components/Page';\nimport { Card } from './components/Card';\nimport { Modal } from './components/common/Modal';\nimport { Basket } from './components/common/Basket';\nimport { Form } from './components/common/Form';\nimport { Success } from './components/common/Success';\nimport { ensureElement } from './utils/utils';\nimport { API_URL, CDN_URL } from './utils/constants';\n/**\n * Application initialization\n */\n// Initialize core services\nconst events = new EventEmitter();\nconst page = new Page(document.body, events);\nconst api = new LarekAPI(CDN_URL, API_URL);\n// Initialize modal windows\nconst modalContainers = Array.from(document.querySelectorAll('.modal'));\nconst modal = new Modal(modalContainers[0], events);\nconst basketModal = new Modal(modalContainers[1], events);\nconst orderModal = new Modal(modalContainers[2], events);\nconst successModal = new Modal(modalContainers[3], events);\n// Get HTML templates\nconst basketTemplate = ensureElement('#basket');\nconst successTemplate = ensureElement('#success');\nconst cardCatalogTemplate = ensureElement('#card-catalog');\nconst cardPreviewTemplate = ensureElement('#card-preview');\nconst basketItemTemplate = ensureElement('#card-basket');\nconst orderTemplate = ensureElement('#order');\nconst contactsTemplate = ensureElement('#contacts');\n// Initialize components\nconst basket = new Basket(basketTemplate.content.querySelector('.basket'), events);\nconst success = new Success(successTemplate.content.querySelector('.order-success'), events);\n/**\n * Application state initialization\n */\nconst appData = new AppData({\n    catalog: [],\n    basket: JSON.parse(localStorage.getItem('basket') || '[]'),\n    preview: null,\n    order: {\n        email: '',\n        phone: '',\n        address: '',\n        payment: '',\n        items: [],\n        total: 0,\n    },\n}, events);\n// Initialize basket counter from localStorage\nconst savedBasket = JSON.parse(localStorage.getItem('basket') || '[]');\npage.counter = savedBasket.length;\n/**\n * Event handlers\n */\n// Handle catalog updates\nevents.on('items:changed', () => {\n    const state = appData.getState();\n    page.catalog = state.catalog.map((item) => {\n        const cardElement = cardCatalogTemplate.content.cloneNode(true);\n        const card = new Card(cardElement.firstElementChild, {\n            onClick: () => {\n                appData.setPreview(item);\n                modal.open();\n            },\n        });\n        return card.render({\n            title: item.title,\n            image: item.image,\n            price: item.price,\n            category: item.category,\n        });\n    });\n});\n// Handle basket counter clicks\nconst basketCounter = document.querySelector('.header__basket');\nif (basketCounter) {\n    basketCounter.addEventListener('click', () => {\n        const state = appData.getState();\n        const basketItems = state.basket.map((item) => {\n            const cardElement = basketItemTemplate.content.cloneNode(true);\n            const card = new Card(cardElement.firstElementChild, {\n                onDelete: () => {\n                    appData.removeFromBasket(item.id);\n                },\n            });\n            return card.render({\n                title: item.title,\n                price: item.price,\n                category: item.category,\n            });\n        });\n        const basketTotal = state.basket.reduce((sum, item) => sum + item.price, 0);\n        basketModal.render({\n            content: basket.render({\n                items: basketItems,\n                total: basketTotal,\n            }),\n        });\n        basketModal.open();\n    });\n}\n// Handle product preview\nevents.on('preview:changed', () => {\n    const state = appData.getState();\n    const item = state.preview;\n    if (item) {\n        const isInBasket = state.basket.some((basketItem) => basketItem.id === item.id);\n        const card = new Card(cardPreviewTemplate.content.cloneNode(true), {\n            onClick: () => {\n                if (item.price !== null) {\n                    appData.addToBasket(item);\n                    modal.close();\n                }\n            },\n        });\n        modal.render({\n            content: card.render({\n                title: item.title,\n                image: item.image,\n                price: item.price,\n                category: item.category,\n                description: item.description,\n            }),\n        });\n        card.disabled = isInBasket || item.price === null;\n    }\n    else {\n        modal.close();\n    }\n});\n// Handle basket changes\nevents.on('basket:changed', () => {\n    const state = appData.getState();\n    page.counter = state.basket.length;\n    const basketItems = state.basket.map((item) => {\n        const cardElement = basketItemTemplate.content.cloneNode(true);\n        const card = new Card(cardElement.firstElementChild, {\n            onDelete: () => {\n                appData.removeFromBasket(item.id);\n            },\n        });\n        return card.render({\n            title: item.title,\n            price: item.price,\n            category: item.category,\n        });\n    });\n    const basketTotal = state.basket.reduce((sum, item) => sum + item.price, 0);\n    basketModal.render({\n        content: basket.render({\n            items: basketItems,\n            total: basketTotal,\n        }),\n    });\n    localStorage.setItem('basket', JSON.stringify(state.basket));\n});\n// Handle checkout process\nevents.on('basket:checkout', () => {\n    basketModal.close();\n    const orderForm = new Form(orderTemplate.content.cloneNode(true), events);\n    orderModal.render({\n        content: orderForm.render({\n            valid: false,\n            errors: [],\n        }),\n    });\n    orderModal.open();\n});\n// Handle form input\nevents.on('input', (data) => {\n    if (data.field === 'email' ||\n        data.field === 'phone' ||\n        data.field === 'address') {\n        appData.setOrderField(data.field, data.value);\n    }\n});\n// Handle form submission\nevents.on('submit', (data) => {\n    if (data.payment && data.address) {\n        appData.setOrderField('address', data.address);\n        appData.setOrderField('payment', data.payment);\n        const contactsForm = new Form(contactsTemplate.content.cloneNode(true), events);\n        orderModal.render({\n            content: contactsForm.render({\n                valid: false,\n                errors: [],\n            }),\n        });\n    }\n});\n// Handle contacts form submission\nevents.on('contacts:submit', (data) => {\n    appData.setOrderField('email', data.email);\n    appData.setOrderField('phone', data.phone);\n    const state = appData.getState();\n    api\n        .createOrder(Object.assign(Object.assign({}, state.order), { items: state.basket.map((item) => item.id), total: state.basket.reduce((sum, item) => sum + item.price, 0) }))\n        .then((result) => {\n        orderModal.close();\n        successModal.render({\n            content: success.render({\n                total: result.total,\n            }),\n        });\n        successModal.open();\n        appData.clearBasket();\n    })\n        .catch(console.error);\n});\n// Handle success modal close\nevents.on('success:close', () => {\n    successModal.close();\n});\n// Start the app\napi\n    .getProductList()\n    .then((items) => {\n    appData.setCatalog(items);\n    // Trigger initial render of catalog\n    const state = appData.getState();\n    page.catalog = state.catalog.map((item) => {\n        const cardElement = cardCatalogTemplate.content.cloneNode(true);\n        const card = new Card(cardElement.firstElementChild, {\n            onClick: () => {\n                appData.setPreview(item);\n                modal.open();\n            },\n        });\n        return card.render({\n            title: item.title,\n            image: item.image,\n            price: item.price,\n            category: item.category,\n        });\n    });\n})\n    .catch(console.error);\n"],"names":["LarekAPI","_Api","_inherits","_super","_createSuper","cdn","baseUrl","options","_this","_classCallCheck","call","_createClass","key","value","getProductList","_this2","this","get","then","data","items","map","item","Object","assign","image","createOrder","order","post","Api","_a","arguments","length","undefined","headers","handleResponse","response","ok","json","Promise","reject","error","statusText","uri","fetch","method","body","JSON","stringify","EventEmitter","_events","Map","on","eventName","callback","has","set","Set","add","off","size","emit","forEach","subscribers","name","RegExp","test","onAll","offAll","trigger","context","event","ActionType","Model","events","state","getState","updateState","newState","emitChanges","AppData","_Model","dispatch","type","payload","_eventMap","field","SET_CATALOG","catalog","ADD_TO_BASKET","basket","concat","_toConsumableArray","REMOVE_FROM_BASKET","filter","id","CLEAR_BASKET","SET_PREVIEW","preview","UPDATE_ORDER","total","Number","eventMap","_defineProperty","setCatalog","addToBasket","removeFromBasket","clearBasket","setPreview","setOrderField","validateOrder","reduce","errors","Component","container","setText","element","textContent","String","setImage","src","alt","setDisabled","setAttribute","removeAttribute","Page","_Component","_counter","querySelector","_catalog","_wrapper","setCounter","bind","_assertThisInitialized","toString","_this$_catalog","replaceChildren","apply","counter","render","isSelector","x","ensureElement","selectorElement","elements","ensureAllElements","document","Array","from","querySelectorAll","NodeList","isArray","Error","console","warn","pop","HTMLElement","Card","actions","DocumentFragment","firstElementChild","_title","_price","_category","_image","_button","classList","contains","onClick","addEventListener","onDelete","deleteButton","dataset","title","toggle","setPrice","setCategory","className","categoryClass","другое","дополнительное","кнопка","toLowerCase","category","price","selected","Modal","_closeButton","_content","_container","close","target","Element","open","documentElement","style","overflow","remove","content","Basket","_list","_total","_this$_list","Form","_validationErrors","_form","_submit","_errors","_paymentButtons","_address","_email","_phone","validateForm","button","e","preventDefault","btn","handleSubmit","clear","some","trim","valid","handleInput","_b","_c","selectedPayment","find","paymentMethod","getAttribute","payment","address","email","phone","_this$_errors","div","createElement","Success","_close","API_URL","process","CDN_URL","page","api","modalContainers","modal","basketModal","orderModal","successModal","basketTemplate","successTemplate","cardCatalogTemplate","cardPreviewTemplate","basketItemTemplate","orderTemplate","contactsTemplate","success","appData","parse","localStorage","getItem","savedBasket","cardElement","cloneNode","basketCounter","basketItems","basketTotal","sum","isInBasket","basketItem","card","description","disabled","setItem","orderForm","contactsForm","result"],"sourceRoot":""}